// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	
	field Array str;
	field int length;


    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
	let str = Array.new(maxLength);
	let length = 0;
	return this;
    }



    /** Disposes this string. */
    method void dispose() {
	do Memory.deAlloc(str);
	let length = 0;
	return;
    }



    /** Returns the current length of this string. */
    method int length() {
	return length;
    }



    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
	return str[j];
    }




    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
	let str[j] = c;
	return;
    }



    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
	let str[length] = c;
	let length =  length + 1;
	return this;
    }




    /** Erases the last character from this string. */
    method void eraseLastChar() {
	let str[length - 1] = 0;
	let length = length - 1;
	return;
    }





    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
	var int counter;
	var int decimalPlace;
	var int intValue;
	var int startPoint;

	while((str[counter]>48 | str[counter]=48) & (str[counter]<57 | str[counter]=57)){
		let counter = counter + 1;		
	}
	
	let startPoint = counter;
	let intValue = 0;
	let decimalPlace = 1;	


	while(counter>0 | counter=0){
		let intValue = intValue + (str[counter] - 48)*decimalPlace;	
		let counter = counter - 1;
		let decimalPlace = decimalPlace*10;	 
	}

	return intValue;

    }







    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
	var int value;
	var Array valueDigits;
	var int counter;
	var int numberOfDigits;
	var int decimalPlace;	
	var int isNegative;
	var int finalPoint;
	var int resultValue;


	let isNegative = 0;	
	let counter = 0;
	let value = val;

	

	
	if(value < 0){
		let isNegative = 1;	
		let value = Math.abs(value) ;
	}
	
	let resultValue = value;

	
	while(value > 0){
		let value = value/10;
		let counter = counter + 1;			
	}	
	

	let value = resultValue;	
	let numberOfDigits = counter;

	if(isNegative = 1){
		let numberOfDigits = numberOfDigits + 1;	
		do appendChar(45);	
		
	}

		
	let valueDigits = Array.new(numberOfDigits);
	let counter = 0;	
	let decimalPlace = 1;
	
	if(isNegative = 1){
		let finalPoint = numberOfDigits -2;	
		
		
	}else{
		let finalPoint = numberOfDigits -1;
	}	

	
	while(counter < finalPoint){
		let decimalPlace = decimalPlace*10;
		let counter = counter + 1;
	}


	


	let counter = 0;			
	

	
	do Output.printString("decimalPlace  ****     ");
	do Output.printInt(decimalPlace);
	do Output.println();
	do Output.printInt(value);
	do Output.printString("      ********");
	do Output.println();


	while(counter < finalPoint){
		do appendChar(value/decimalPlace + 48);
		let value = value - ((value/decimalPlace)*decimalPlace);
		let decimalPlace = decimalPlace/10;
		if(decimalPlace = 0){return;}
		let counter = counter + 1;	
		do Output.printString("decimalPlace  ****     ");
		do Output.printInt(decimalPlace);
		do Output.println();
		do Output.printInt(value);
		do Output.printString("      ********");
		do Output.println();
		
	}	
	
	return;	
    }



    /** Returns the new line character. */
    function char newLine() {
	return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
	return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
	return 34;
    }


}
