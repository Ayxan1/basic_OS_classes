// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	
static array ram;
static Array heap;

	


    /** Initializes the class. */
    function void init() {
	let ram = 0;
	let heap = 2048;
	let heap[0] = 0;		//next
	let heap[1] = 14335;		//length
	return;
    }





    /** Returns the RAM value at the given address. */
    function int peek(int address){
	return ram[address]; 
    }




    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
	let ram[address] = value;
	return;
    }






    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
	// Searching available memory fragment.
	var int nextPointer;
	var int freeSpaceSize;
	var int requestedSize;
	var int currentListAddress;
	var int newFreeSegmentBase;
	var int previousFreeSize;
	
	let requestedSize = size;
	let nextPointer = heap[0];
	let freeSpaceSize = heap[1];
	let currentListAddress = 2048;
	
	if(nextPointer = 0){
		let previousFreeSize = 14335;
		let heap[1] = 14335 - ( requestedSize + 2);
		let newFreeSegmentBase = (14335 + 2048) - requestedSize;
		let heap[newFreeSegmentBase] = 0;
	 	let heap[newFreeSegmentBase+1] = requestedSize;
		return newFreeSegmentBase; 	
	}
	
	do Output.printString("If i kecdi");		

	while(~(nextPointer = 0)){
		if((requestedSize > (freeSpaceSize + 2)) | (requestedSize = (freeSpaceSize + 2))){
			let previousFreeSize = heap[currentListAddress + 1];
			let heap[currentListAddress + 1] = heap[currentListAddress + 1] - ( requestedSize + 2);
			let newFreeSegmentBase = (currentListAddress + previousFreeSize) - requestedSize;
			let heap[newFreeSegmentBase] = 0;
	 		let heap[newFreeSegmentBase+1] = requestedSize;
			return newFreeSegmentBase; 						
		}	

		let currentListAddress = nextPointer;
		let nextPointer = heap[currentListAddress];
		let freeSpaceSize = heap[currentListAddress + 1];
	}
	
	return 0;
    }





    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
	var int lastSegment;
	var int currentListAddress;
	var int nextPointer;


	let nextPointer = heap[0];
	let currentListAddress = 2048;

	while(~(nextPointer = 0)){
		let currentListAddress = nextPointer;
		let nextPointer = heap[currentListAddress];
	}
	
	let heap[currentListAddress] = heap[o];
	let heap[currentListAddress + 1] = heap[o+1];

	return;	
    }    






}
